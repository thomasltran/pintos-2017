#include <syscall.h>
#include "tests/main.h"
#include "tests/lib.h"
#include "lib/user/threadpool.h"
#include "lib/user/mm.h"
#include <stdio.h>

#define NUM_THREADS 8

char mymemory[32 * 1024 * 1024]; // set chunk of memory
pthread_mutex_t mem_lock;

struct arg2 {
    uintptr_t a;
    uintptr_t b;
};

static void *
multiplier_task(struct thread_pool *pool, struct arg2 * data)
{
    return (void *)(data->a * data->b);
}

static void *
adder_task(struct thread_pool *pool, struct arg2 * data)
{
    return (void *)(data->a + data->b);
}

static void *
test_task(struct thread_pool *pool, struct arg2 * data)
{
    struct future *f1 = thread_pool_submit(pool, (fork_join_task_t) adder_task, data);
    uintptr_t r1 = (uintptr_t) future_get(f1);
    future_free(f1);

    struct arg2 a2 = {
        .a = r1,
        .b = 7,
    };
    struct future *f2 = thread_pool_submit(pool, (fork_join_task_t) multiplier_task, &a2);
    uintptr_t r2 = (uintptr_t) future_get(f2);
    future_free(f2);

    return (void *)r2;
}

void
test_main (void) 
{
  mm_init(mymemory,  32 * 1024 * 1024);
  pthread_mutex_init(&mem_lock);

  int npools = 4;

  struct thread_pool *pools[npools];
    for (int i = 0; i < npools; i++)
        pools[i] = thread_pool_new(NUM_THREADS);
   
#define N_TASK 11
    struct future *f[npools*N_TASK];
    for (int i = 0; i < npools; i++) {
        for (int j = 0; j < N_TASK; j++) {
            struct arg2 *args = _mm_malloc(sizeof *args, mem_lock);
            args->a = i;
            args->b = j;
            f[N_TASK*i+j] = thread_pool_submit(pools[i], (fork_join_task_t) test_task, args);
        }
    }

    uintptr_t ssum = 0;
    for (int i = 0; i < npools; i++) {
        for (int j = 0; j < N_TASK; j++) {

            ssum += (uintptr_t) future_get(f[N_TASK*i+j]);
            future_free(f[N_TASK*i+j]);
        }
    }

    for (int i = 0; i < npools; i++)
        thread_pool_shutdown_and_destroy(pools[i]);

  pthread_mutex_destroy(&mem_lock);
}