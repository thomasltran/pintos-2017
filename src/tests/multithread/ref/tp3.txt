#include <syscall.h>
#include "tests/main.h"
#include "tests/lib.h"
#include "lib/user/threadpool.h"
#include "lib/user/mm.h"
#include <stdio.h>

#define NUM_THREADS 32

char mymemory[32 * 1024 * 1024]; // set chunk of memory
pthread_mutex_t mem_lock;

struct arg2 {
    uintptr_t a;
    uintptr_t b;
};

static void *
multiplier_task(struct thread_pool *pool UNUSED, struct arg2 * data)
{
    return (void *)(data->a * data->b);
}

static void *
adder_task(struct thread_pool *pool, struct arg2 * data)
{
    return (void *)(data->a + data->b);
}

static void *
test_task(struct thread_pool *pool, struct arg2 * data)
{
    struct future *f1 = thread_pool_submit(pool, (fork_join_task_t) adder_task, data);
    uintptr_t r1 = (uintptr_t) future_get(f1);
    future_free(f1);

    struct arg2 a2 = {
        .a = r1,
        .b = 7,
    };
    struct future *f2 = thread_pool_submit(pool, (fork_join_task_t) multiplier_task, &a2);
    uintptr_t r2 = (uintptr_t) future_get(f2);
    future_free(f2);

    return (void *)r2;
}


void
test_main (void) 
{
  mm_init(mymemory,  32 * 1024 * 1024);
  pthread_mutex_init(&mem_lock);

  struct thread_pool * pool = thread_pool_new(NUM_THREADS);

   struct arg2 args = {
        .a = 2,
        .b = 4,
    };
    struct future * sum = thread_pool_submit(pool, (fork_join_task_t) test_task, &args);

    uintptr_t ssum = (uintptr_t) future_get(sum);
    future_free(sum);

  thread_pool_shutdown_and_destroy(pool);

  if (ssum != 42) {
      printf("Wrong result, expected 42, got %d\n", ssum);
  }

  pthread_mutex_destroy(&mem_lock);
}