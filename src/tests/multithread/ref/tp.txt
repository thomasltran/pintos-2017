#include <syscall.h>
#include "tests/main.h"
#include "tests/lib.h"
#include "lib/user/threadpool.h"
#include "lib/user/mm.h"
#include <stdio.h>

#define NUM_THREADS 32

char mymemory[32 * 1024 * 1024]; // set chunk of memory
pthread_mutex_t mem_lock;

struct arg2 {
    uintptr_t a;
    uintptr_t b;
};

void * thread_func(void *);

void * thread_func(void *arg)
{
  return arg;
}

static void *
adder_task(struct thread_pool *pool UNUSED, struct arg2 * data)
{
    return (void *)(data->a + data->b);
}

void
test_main (void) 
{
  mm_init(mymemory,  32 * 1024 * 1024);
  pthread_mutex_init(&mem_lock);

  struct thread_pool * threadpool = thread_pool_new(NUM_THREADS);
   
  struct arg2 args = {
      .a = 20,
      .b = 22,
  };

  struct future * sum = thread_pool_submit(threadpool, (fork_join_task_t) adder_task, &args);

  uintptr_t ssum = (uintptr_t) future_get(sum);
  future_free(sum);
  thread_pool_shutdown_and_destroy(threadpool);

  if (ssum != 42) {
      printf("Wrong result, expected 42, got %d\n", ssum);
  }

  pthread_mutex_destroy(&mem_lock);
}