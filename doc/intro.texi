@node Introduction
@chapter Introduction

Welcome to Pintos.  Pintos is a simple operating system framework for
the 80@var{x}86 architecture.  It supports kernel threads, loading and
running user programs, and a file system, but it implements all of
these in a very simple way.  In the Pintos projects, you and your
project team will strengthen its support in all three of these areas.
You will also add a virtual memory implementation.

Pintos could, theoretically, run on a regular IBM-compatible PC.
Unfortunately, it is impractical to supply every @value{coursenumber} student
a dedicated PC for use with Pintos.  Therefore, we will run Pintos projects
in a system simulator, that is, a program that simulates an 80@var{x}86
CPU and its peripheral devices accurately enough that unmodified operating
systems and software can run under it.  In class we will primarily use the
@uref{http://fabrice.bellard.free.fr/qemu/, , QEMU} simulator,
using @uref{http://bochs.sourceforge.net, , Bochs} as backup.
Pintos has also been tested with
@uref{http://www.vmware.com/, , VMware Player}.

These projects are hard.  @value{coursenumber} has a reputation of taking a lot of
time, and deservedly so.  We will do what we can to reduce the workload, such
as providing a lot of support material, but there is plenty of
hard work that needs to be done.  We welcome your
feedback.  If you have suggestions on how we can reduce the unnecessary
overhead of assignments, cutting them down to the important underlying
issues, please let us know.

This chapter explains how to get started working with Pintos.  You
should read the entire chapter before you start work on any of the
projects.

@menu
* Getting Started::             
* Grading::                     
* Changes::
* Legal and Ethical Issues::    
* Acknowledgements::            
* Trivia::                      
@end menu

@node Getting Started
@section Getting Started

To get started, you'll have to log into a machine that Pintos can be
built on.  
@localmachines{}
We will test your code on these machines, and the instructions given
here assume this environment.  We cannot provide support for installing
and working on Pintos on your own machine, but we provide instructions
for doing so nonetheless (@pxref{Installing Pintos}).

Once you've logged into one of these machines, either locally or
remotely, start out by adding our binaries directory to your @env{PATH}
environment.  
@localpathsetup{}

@menu
* Source Tree Overview::        
* Building Pintos::             
* Running Pintos::              
@c * Debugging versus Testing::    
@end menu

@node Source Tree Overview
@subsection Source Tree Overview

To obtain our local copy of Pintos, you need to use the @command{git}
version control system.
To start with, you should fork my copy available at
@uref{https://git.cs.vt.edu/gback/pintos-2017}
The Pintos code is in the master branch.
We will post necessary updates there.

Let's take a look at what's inside.  Here's the directory structure
that you should see in @file{pintos/src}:

@table @file
@item threads/
Source code for the base kernel, which you will modify starting in
project 1.

@item userprog/
Source code for the user program loader, which you will modify
starting with project 2.

@item vm/
An almost empty directory.  You will implement virtual memory here in
project 3.

@item filesys/
Source code for a basic file system.  You will use this file system
starting with project 2, but you will not modify it until project 4.

@item devices/
Source code for I/O device interfacing: keyboard, timer, disk, etc.
You will modify the timer implementation in project 1.  Otherwise
you should have no need to change this code.

@item lib/
An implementation of a subset of the standard C library.  The code in
this directory is compiled into both the Pintos kernel and, starting
from project 2, user programs that run under it.  In both kernel code
and user programs, headers in this directory can be included using the
@code{#include <@dots{}>} notation.  You should have little need to
modify this code.

@item lib/kernel/
Parts of the C library that are included only in the Pintos kernel.
This also includes implementations of some data types that you are
free to use in your kernel code: bitmaps, doubly linked lists, and
hash tables.  In the kernel, headers in this
directory can be included using the @code{#include <@dots{}>}
notation.

@item lib/user/
Parts of the C library that are included only in Pintos user programs.
In user programs, headers in this directory can be included using the
@code{#include <@dots{}>} notation.

@item tests/
Tests for each project.  You can modify this code if it helps you test
your submission, but we will replace it with the originals before we run
the tests.

@item examples/
Example user programs for use starting with project 2.

@item selftest/
A number of self tests, particularly for the SMP-related code.

@item misc/
@itemx utils/
These files may come in handy if you decide to try working with Pintos
on your own machine.  Otherwise, you can ignore them.
@end table

@node Building Pintos
@subsection Building Pintos

As the next step, build the source code supplied for
the first project.  First, @command{cd} into the @file{threads}
directory.  Then, issue the @samp{make} command.  This will create a
@file{build} directory under @file{threads}, populate it with a
@file{Makefile} and a few subdirectories, and then build the kernel
inside.  The entire build should complete in a few seconds.

@localcrossbuild{}

Following the build, the following are the interesting files in the
@file{build} directory:

@table @file
@item Makefile
A copy of @file{pintos/src/Makefile.build}.  It describes how to build
the kernel.  @xref{Adding Source Files}, for more information.

@item kernel.o
Object file for the entire kernel.  This is the result of linking
object files compiled from each individual kernel source file into a
single object file.  It contains debug information, so you can run
GDB (@pxref{GDB}) or @command{backtrace} (@pxref{Backtraces}) on it.

@item kernel.bin
Memory image of the kernel, that is, the exact bytes loaded into
memory to run the Pintos kernel.  This is just @file{kernel.o} with
debug information stripped out, which saves a lot of space, which in
turn keeps the kernel from bumping up against a @w{512 kB} size limit
imposed by the kernel loader's design.

@item loader.bin
Memory image for the kernel loader, a small chunk of code written in
assembly language that reads the kernel from disk into memory and
starts it up.  It is exactly 512 bytes long, a size fixed by the
PC BIOS.
@end table

Subdirectories of @file{build} contain object files (@file{.o}) and
dependency files (@file{.d}), both produced by the compiler.  The
dependency files tell @command{make} which source files need to be
recompiled when other source or header files are changed.

@node Running Pintos
@subsection Running Pintos

We've supplied a program for conveniently running Pintos in a simulator,
called @command{pintos}.  In the simplest case, you can invoke
@command{pintos} as @code{pintos @var{argument}@dots{}}.  Each
@var{argument} is passed to the Pintos kernel for it to act on.

Try it out.  First @command{cd} into the newly created @file{build}
directory.  Then issue the command @code{pintos run alarm-multiple},
which passes the arguments @code{run alarm-multiple} to the Pintos
kernel.  In these arguments, @command{run} instructs the kernel to run a
test and @code{alarm-multiple} is the test to run.

This command creates a temporary configuration file, which is needed for
running Bochs, and then invokes Bochs.  If you have access to an X11 display, Bochs opens a new window that
represents the simulated machine's display, and a BIOS message briefly
flashes.  Then Pintos boots and runs the @code{alarm-multiple} test
program, which outputs a few screenfuls of text.  When it's done, you
can close Bochs by clicking on the ``Power'' button in the window's top
right corner, or rerun the whole process by clicking on the ``Reset''
button just to its left.  The other buttons are not very useful for our
purposes.

(If no window appeared at all, then you're probably logged in remotely and X
forwarding is not set up correctly.  In this case, you can fix your X
setup, or you can use the @option{-v} option to disable X output:
@code{pintos -v -- run alarm-multiple}.)

The text printed by Pintos inside Bochs probably went by too quickly to
read.  However, you've probably noticed by now that the same text was
displayed in the terminal you used to run @command{pintos}.  This is
because Pintos sends all output both to the VGA display and to the first
serial port, and by default the serial port is connected to Bochs's
@code{stdin} and @code{stdout}.  You can log serial output to a file by
redirecting at the
command line, e.g.@: @code{pintos run alarm-multiple > logfile}.

The @command{pintos} program offers several options for configuring the
simulator or the virtual hardware.  If you specify any options, they
must precede the commands passed to the Pintos kernel and be separated
from them by @option{--}, so that the whole command looks like
@code{pintos @var{option}@dots{} -- @var{argument}@dots{}}.  Invoke
@code{pintos} without any arguments to see a list of available options.
Options can select a simulator to use: the default is Qemu, but
@option{--qemu} selects QEMU.  You can run the simulator
with a debugger (@pxref{GDB}).  You can set the amount of memory to give
the VM.  Finally, you can select how you want VM output to be displayed:
use @option{-v} to turn off the VGA display, @option{-t} to use your
terminal window as the VGA display instead of opening a new window
(Bochs only), or @option{-s} to suppress serial input from @code{stdin}
and output to @code{stdout}.

The Pintos kernel has commands and options other than @command{run}.
These are not very interesting for now, but you can see a list of them
using @option{-h}, e.g.@: @code{pintos -h}.

@c @node Debugging versus Testing
@c @subsection Debugging versus Testing

@c When you're debugging code, it's useful to be able to run a
@c program twice and have it do exactly the same thing.  On second and
@c later runs, you can make new observations without having to discard or
@c verify your old observations.  This property is called
@c ``reproducibility.''  One of the simulators that Pintos supports, Bochs,
@c can be set up for
@c reproducibility, and that's the way that @command{pintos} invokes it
@c by default.

@c Of course, a simulation can only be reproducible from one run to the
@c next if its input is the same each time.  For simulating an entire
@c computer, as we do, this means that every part of the computer must be
@c the same.  For example, you must use the same command-line argument, the
@c same disks, the same version
@c of Bochs, and you must not hit any keys on the keyboard (because you
@c could not be sure to hit them at exactly the same point each time)
@c during the runs.

@c While reproducibility is useful for debugging, it is a problem for
@c testing thread synchronization, an important part of most of the projects.  In
@c particular, when Bochs is set up for reproducibility, timer interrupts
@c will come at perfectly reproducible points, and therefore so will
@c thread switches.  That means that running the same test several times
@c doesn't give you any greater confidence in your code's correctness
@c than does running it only once.

@c So, to make your code easier to test, we've added a feature, called
@c ``jitter,'' to Bochs, that makes timer interrupts come at random
@c intervals, but in a perfectly predictable way.  In particular, if you
@c invoke @command{pintos} with the option @option{-j @var{seed}}, timer
@c interrupts will come at irregularly spaced intervals.  Within a single
@c @var{seed} value, execution will still be reproducible, but timer
@c behavior will change as @var{seed} is varied.  Thus, for the highest
@c degree of confidence you should test your code with many seed values.

@c On the other hand, when Bochs runs in reproducible mode, timings are not
@c realistic, meaning that a ``one-second'' delay may be much shorter or
@c even much longer than one second.  You can invoke @command{pintos} with
@c a different option, @option{-r}, to set up Bochs for realistic
@c timings, in which a one-second delay should take approximately one
@c second of real time.  Simulation in real-time mode is not reproducible,
@c and options @option{-j} and @option{-r} are mutually exclusive.

@c The QEMU simulator is available as an
@c alternative to Bochs (use @option{--qemu} when invoking
@c @command{pintos}).  The QEMU simulator is much faster than Bochs, but it
@c only supports real-time simulation and does not have a reproducible
@c mode.

@node Grading
@section Grading

We will grade your assignments based on test results and design quality,
each of which comprises 50% of your grade.

@menu
* Testing::                     
* Design::                      
@end menu

@node Testing
@subsection Testing

Your test result grade will be based on our tests.  Each project has
several tests, each of which has a name beginning with @file{tests}.
To completely test your submission, invoke @code{make check} from the
project @file{build} directory.  This will build and run each test and
print a ``pass'' or ``fail'' message for each one.  When a test fails,
@command{make check} also prints some details of the reason for failure.
After running all the tests, @command{make check} also prints a summary
of the test results.

Although we used Bochs for project 1 in the past, we are now using
Qemu for all projects.
@command{make check} will select the simulator we use, but
you can override its choice by specifying @option{SIMULATOR=--bochs} or
@option{SIMULATOR=--qemu} on the @command{make} command line.

You can also run individual tests one at a time.  A given test @var{t}
writes its output to @file{@var{t}.output}, then a script scores the
output as ``pass'' or ``fail'' and writes the verdict to
@file{@var{t}.result}.  To run and grade a single test, @command{make}
the @file{.result} file explicitly from the @file{build} directory, e.g.@:
@code{make tests/threads/alarm-multiple.result}.  If @command{make} says
that the test result is up-to-date, but you want to re-run it anyway,
either run @code{make clean} or delete the @file{.output} file by hand.

By default, each test provides feedback only at completion, not during
its run.  If you prefer, you can observe the progress of each test by
specifying @option{VERBOSE=1} on the @command{make} command line, as in
@code{make check VERBOSE=1}.  You can also provide arbitrary options to the
@command{pintos} run by the tests with @option{PINTOSOPTS='@dots{}'}.
@c e.g.@: @code{make check PINTOSOPTS='-j 1'} to select a jitter value of 1
@c (@pxref{Debugging versus Testing}).

All of the tests and related files are in @file{pintos/src/tests}.
Before we test your submission, we will replace the contents of that
directory by a pristine, unmodified copy, to ensure that the correct
tests are used.  Thus, you can modify some of the tests if that helps in
debugging, but we will run the originals.

All software has bugs, so some of our tests may be flawed.  If you think
a test failure is a bug in the test, not a bug in your code,
please point it out.  We will look at it and fix it if necessary.

Please don't try to take advantage of our generosity in giving out our
test suite.  Your code has to work properly in the general case, not
just for the test cases we supply.  For example, it would be unacceptable
to explicitly base the kernel's behavior on the name of the running
test case.  Such attempts to side-step the test cases will receive no
credit.  If you think your solution may be in a gray area here, please
ask us about it.

@node Design
@subsection Design

We will judge your design based on the design document and the source
code that you submit.  We will read your entire design document and much
of your source code.  

Don't forget that design quality, including the design document, is 50%
of your project grade.  It
is better to spend one or two hours writing a good design document than
it is to spend that time getting the last 5% of the points for tests and
then trying to rush through writing the design document in the last 15
minutes.

@menu
* Design Document::             
* Source Code::                 
@end menu

@node Design Document
@subsubsection Design Document

We no longer provide a design document template for each project.  

Instead, we ask for a brief write-up (between 500 and 800 words)
describing how your project works, focusing on the essential
rationales behind your design decisions.

You may and should discuss this in your group, but we ask that
each group member submits their own document, thus showing their
ability to express the product of the project in their own words. 

@node Source Code
@subsubsection Source Code

Your design will also be judged by looking at your source code.  We will
typically look at the differences between the original Pintos source
tree and your submission, based on the output of a command like
@code{diff -urpb pintos.orig pintos.submitted}.  We will try to match up your
description of the design with the code submitted.  Important
discrepancies between the description and the actual code will be
penalized, as will be any bugs we find by spot checks.

The most important aspects of source code design are those that specifically
relate to the operating system issues at stake in the project.  For
example, the organization of an inode is an important part of file
system design, so in the file system project a poorly designed inode
would lose points.  Other issues are much less important.  For
example, multiple Pintos design problems call for a ``priority
queue,'' that is, a dynamic collection from which the minimum (or
maximum) item can quickly be extracted.  Fast priority queues can be
implemented many ways, but we do not expect you to build a fancy data
structure even if it might improve performance.  Instead, you are
welcome to use a linked list (and Pintos even provides one with
convenient functions for sorting and finding minimums and maximums).

Pintos is written in a consistent style.  Make your additions and
modifications in existing Pintos source files blend in, not stick out.
In new source files, adopt the existing Pintos style by preference, but
make your code self-consistent at the very least.  There should not be a
patchwork of different styles that makes it obvious that three different
people wrote the code.  Use horizontal and vertical white space to make
code readable.  Add a brief comment on every structure, structure
member, global or static variable, typedef, enumeration, and function
definition.  Update
existing comments as you modify code.  Don't comment out or use the
preprocessor to ignore blocks of code (instead, remove it entirely).
Use assertions to document key invariants.  Decompose code into
functions for clarity.  Code that is difficult to understand because it
violates these or other ``common sense'' software engineering practices
will be penalized.

In the end, remember your audience.  Code is written primarily to be
read by humans.  It has to be acceptable to the compiler too, but the
compiler doesn't care about how it looks or how well it is written.

@node Changes
@section Changes

In Spring 2017, Pintos was upgraded to a Symmetric MultiProcessing (@acronym{SMP})
kernel. The reference manual has mostly been updated to reflect those changes. The
first project (@pxref{Threads}) has been entirely revamped.
None of the other projects were affected. 

Change details:

@itemize @bullet

@item
Added support to parse MP Configuration Table. (See @file{threads/mp.c}).

@item 
Priority Scheduler assignment has been removed, replaced by a load balancing assignment.

@item
4.4@acronym{BSD} scheduler has been replaced by Linux's @acronym{CFS}. 
(@xref{Completely Fair Scheduler}.)

@item
Atomic operations added to Synchronization. (@xref{Atomic Operations}.)

@item
Spinlocks added to Synchronization. (@xref{Spinlocks}.)

@item
Timer changed from 8254 timer to LAPIC timer. (See @file{devices/lapic.c}).

@item
Interrupt controller changed from PIC to APIC. (See @file{devices/lapic.c} and 
@file{devices/ioapic.c}.)

@item
Interrupt save state changed from @code{enum_level} to @func{intr_disable_push}/@func{intr_disable_pop} mechanism.

@item
Many places where disabling interrupts were used to synchronize with interrupt
handlers, a spinlock is held instead. 

@item
Bitmap updated to use atomic library, which doesn't make uniprocessor assumptions

@item
Base code scheduler extended to per-CPU ready queues.

@end itemize

@node Legal and Ethical Issues
@section Legal and Ethical Issues

Pintos is distributed under a liberal license that allows free use,
modification, and distribution.  Students and others who work on Pintos
own the code that they write and may use it for any purpose.
Pintos comes with NO WARRANTY, not even for MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.
@xref{License}, for details of the license and lack of warranty.

@localhonorcodepolicy{}

@node Acknowledgements
@section Acknowledgements

The Pintos core and this documentation were originally written by Ben
Pfaff @email{blp@@cs.stanford.edu}.

Support for PCI, USB, GRUB, partitions, UHCI, and other features
were contributed by Anthony Romano @email{chz@@vt.edu}.

Support for SMP was added by Lance Chao @email{kisseki@@vt.edu},
based in part on code provided by MIT's xv6 operating system.

The GDB macros supplied with Pintos were written by Godmar Back
@email{gback@@cs.vt.edu}, and their documentation is adapted from his
work.

The original structure and form of Pintos was inspired by the Nachos
instructional operating system from the University of California,
Berkeley (@bibref{Christopher}).

The Pintos projects and documentation originated with those designed for
Nachos by current and former CS 140 teaching assistants at Stanford
University, including at least Yu Ping, Greg Hutchins, Kelly Shaw, Paul
Twohey, Sameer Qureshi, and John Rector.

Example code for monitors (@pxref{Monitors}) is
from classroom slides originally by Dawson Engler and updated by Mendel
Rosenblum.

@localcredits{}

@node Trivia
@section Trivia

Pintos originated as a replacement for Nachos with a similar design.
Since then Pintos has greatly diverged from the Nachos design.  Pintos
differs from Nachos in two important ways.  First, Pintos runs on real
or simulated 80@var{x}86 hardware, but Nachos runs as a process on a
host operating system.  Second, Pintos is written in C like most
real-world operating systems, but Nachos is written in C++.

Why the name ``Pintos''?  First, like nachos, pinto beans are a common
Mexican food.  Second, Pintos is small and a ``pint'' is a small amount.
Third, like drivers of the eponymous car, students are likely to have
trouble with blow-ups.
